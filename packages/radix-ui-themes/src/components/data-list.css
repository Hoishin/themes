:where(.rt-DataListRoot) {
  margin: 0;
}

@breakpoints {
  .rt-DataListRoot.rt-r-gap-0 {
    --data-list-gap-x: 0px;
    --data-list-gap-y: 0px;
  }
  .rt-DataListRoot.rt-r-gap-1 {
    --data-list-gap-x: var(--space-1);
    --data-list-gap-y: var(--space-1);
  }
  .rt-DataListRoot.rt-r-gap-2 {
    --data-list-gap-x: var(--space-2);
    --data-list-gap-y: var(--space-2);
  }
  .rt-DataListRoot.rt-r-gap-3 {
    --data-list-gap-x: var(--space-3);
    --data-list-gap-y: var(--space-3);
  }
  .rt-DataListRoot.rt-r-gap-4 {
    --data-list-gap-x: var(--space-4);
    --data-list-gap-y: var(--space-4);
  }
  .rt-DataListRoot.rt-r-gap-5 {
    --data-list-gap-x: var(--space-5);
    --data-list-gap-y: var(--space-5);
  }
  .rt-DataListRoot.rt-r-gap-6 {
    --data-list-gap-x: var(--space-6);
    --data-list-gap-y: var(--space-6);
  }
  .rt-DataListRoot.rt-r-gap-7 {
    --data-list-gap-x: var(--space-7);
    --data-list-gap-y: var(--space-7);
  }
  .rt-DataListRoot.rt-r-gap-8 {
    --data-list-gap-x: var(--space-8);
    --data-list-gap-y: var(--space-8);
  }
  .rt-DataListRoot.rt-r-gap-9 {
    --data-list-gap-x: var(--space-9);
    --data-list-gap-y: var(--space-9);
  }

  .rt-DataListRoot.rt-r-gap-x-0 {
    --data-list-gap-x: 0px;
  }
  .rt-DataListRoot.rt-r-gap-x-1 {
    --data-list-gap-x: var(--space-1);
  }
  .rt-DataListRoot.rt-r-gap-x-2 {
    --data-list-gap-x: var(--space-2);
  }
  .rt-DataListRoot.rt-r-gap-x-3 {
    --data-list-gap-x: var(--space-3);
  }
  .rt-DataListRoot.rt-r-gap-x-4 {
    --data-list-gap-x: var(--space-4);
  }
  .rt-DataListRoot.rt-r-gap-x-5 {
    --data-list-gap-x: var(--space-5);
  }
  .rt-DataListRoot.rt-r-gap-x-6 {
    --data-list-gap-x: var(--space-6);
  }
  .rt-DataListRoot.rt-r-gap-x-7 {
    --data-list-gap-x: var(--space-7);
  }
  .rt-DataListRoot.rt-r-gap-x-8 {
    --data-list-gap-x: var(--space-8);
  }
  .rt-DataListRoot.rt-r-gap-x-9 {
    --data-list-gap-x: var(--space-9);
  }

  .rt-DataListRoot.rt-r-gap-y-0 {
    --data-list-gap-y: 0px;
  }
  .rt-DataListRoot.rt-r-gap-y-1 {
    --data-list-gap-y: var(--space-1);
  }
  .rt-DataListRoot.rt-r-gap-y-2 {
    --data-list-gap-y: var(--space-2);
  }
  .rt-DataListRoot.rt-r-gap-y-3 {
    --data-list-gap-y: var(--space-3);
  }
  .rt-DataListRoot.rt-r-gap-y-4 {
    --data-list-gap-y: var(--space-4);
  }
  .rt-DataListRoot.rt-r-gap-y-5 {
    --data-list-gap-y: var(--space-5);
  }
  .rt-DataListRoot.rt-r-gap-y-6 {
    --data-list-gap-y: var(--space-6);
  }
  .rt-DataListRoot.rt-r-gap-y-7 {
    --data-list-gap-y: var(--space-7);
  }
  .rt-DataListRoot.rt-r-gap-y-8 {
    --data-list-gap-y: var(--space-8);
  }
  .rt-DataListRoot.rt-r-gap-y-9 {
    --data-list-gap-y: var(--space-9);
  }
}

/* prettier-ignore */
.rt-DataListRoot::before,
  .rt-DataListRoot::after {
    /* Remove top and bottom item padding */
    --data-list-padding-trim: calc(var(--data-list-gap-y) / -2);
    /* Include padding trim when leading trim is used */
    --leading-trim-start: calc(var(--data-list-padding-trim) + var(--default-leading-trim-start));
    --leading-trim-end: calc(var(--data-list-padding-trim) + var(--default-leading-trim-end));
    display: table;
    content: '';
  }
:where(.rt-DataListRoot)::before {
  margin-bottom: var(--data-list-padding-trim);
}
:where(.rt-DataListRoot)::after {
  margin-top: var(--data-list-padding-trim);
}

/* Make sure that consecutive data lists are spaced, regardless of leading trim */
.rt-DataListRoot:has(+ .rt-DataListRoot)::after,
.rt-DataListRoot + .rt-DataListRoot::before {
  display: none;
}

.rt-DataListItem {
  position: relative;
  box-sizing: border-box;
}

@breakpoints {
  .rt-r-direction-column .rt-DataListItem {
    display: flex;
    flex-direction: column;
    gap: var(--space-1);
    padding-top: calc(var(--data-list-gap-y) / 2);
    padding-bottom: calc(var(--data-list-gap-y) / 2);
  }
  .rt-r-direction-row .rt-DataListItem {
    display: table-row;
    padding: 0;
  }
}

.rt-DataListLabel {
  --data-list-label-width: 200px;
  color: var(--gray-a11);
  box-sizing: border-box;
  vertical-align: inherit;
}

@breakpoints {
  .rt-r-direction-column .rt-DataListLabel {
    display: block;
    white-space: normal;
    padding: 0;
    width: auto;
  }
  .rt-r-direction-row .rt-DataListLabel {
    display: table-cell;
    white-space: nowrap;
    padding-top: calc(var(--data-list-gap-y) / 2);
    padding-bottom: calc(var(--data-list-gap-y) / 2);
    padding-right: var(--data-list-gap-x);
    width: var(--data-list-label-width);
  }
}

.rt-DataListData {
  vertical-align: inherit;
  box-sizing: border-box;
  margin: 0;
}

@breakpoints {
  .rt-r-direction-column .rt-DataListData {
    display: block;
    padding: 0;
  }
  .rt-r-direction-row .rt-DataListData {
    display: table-cell;

    /*
       * At default size, `DataListLabel` content is 20px high. We want to allow the `DataListData`
       * content to be a bit larger in height without increasing the height of each item, in case
       * there is a badge or a small button inside.
       */
    padding-top: calc(var(--data-list-gap-y) * 0.375);
    padding-bottom: calc(var(--data-list-gap-y) * 0.375);
  }
}

.rt-DataListDataInner {
  display: flex;
}

/*
   * Improve alignment when nesting flex elements with Text. Prepending contents with a text character
   * enforces default baseline alignment when child elements contain text within. The character used is
   * a zero-width joiner, which is invisible, and pseudo-elements aren't copyable.
   */
.rt-DataListDataInner::before {
  content: '\200D';
}

.rt-DataListDataInnerContents {
  display: block;
}
